name: Build and Release
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: qtctoys-linux
            asset_name: qtctoys-linux.tar.gz
            binary_name: qtctoys
          - os: macos-latest
            artifact_name: qtctoys-mac
            asset_name: qtctoys-mac.tar.gz
            binary_name: qtctoys
          - os: windows-latest
            artifact_name: qtctoys-windows
            asset_name: qtctoys-windows.zip
            binary_name: qtctoys
            ext: .exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          cache: false
          
      - name: Initialize Go module
        run: |
          if [ ! -f "go.mod" ]; then
            go mod init github.com/${{ github.repository }}
          fi
        shell: bash
        if: matrix.os != 'windows-latest'
        
      - name: Initialize Go module (Windows)
        run: |
          if (-Not (Test-Path -Path "go.mod")) {
            go mod init github.com/${{ github.repository }}
          }
        shell: pwsh
        if: matrix.os == 'windows-latest'
        
      - name: Build
        run: |
          go build -v -o ${{ matrix.binary_name }}${{ matrix.ext || '' }} .
        
      - name: Test
        run: go test -v ./...
        
      - name: Create archive (Linux/Mac)
        if: matrix.os != 'windows-latest'
        run: tar -czvf ${{ matrix.asset_name }} ${{ matrix.binary_name }}
        
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a -tzip ${{ matrix.asset_name }} ${{ matrix.binary_name }}${{ matrix.ext }}
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}
          
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            qtctoys-linux/qtctoys-linux.tar.gz
            qtctoys-mac/qtctoys-mac.tar.gz
            qtctoys-windows/qtctoys-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}